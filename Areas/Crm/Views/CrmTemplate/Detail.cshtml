@using Erp.BackOffice.App_GlobalResources
@using Erp.BackOffice.Helpers
@using Erp.BackOffice.Crm.Models

@model CrmTemplateViewModel

@{
    ViewBag.Title = Wording.PageCreate_TemplatePrint;

    bool isPopup = Request["IsPopup"] != null && Request["IsPopup"].ToString().ToLower() == "true" ? true : false;
    if (isPopup)
    {
        Layout = "~/Views/Shared/_PopupLayout.cshtml";
    }
    else
    {
        Layout = "~/Views/Shared/ACE_AdminLayout.cshtml";
    }

    Erp.BackOffice.Models.PageSetting pageSetting = new Erp.BackOffice.Models.PageSetting
    {
        ModuleName = "CrmTemplate",
        ActionName = "Edit",
        PageTitle = ViewBag.Title,
        DisplaySearchPanel = false,
        IsPopup = false,
        DisplayBackButton = true
    };
}

@section HeadOfPage {
    @Html.ScriptTop_ChosenStyle()
}

@using (Html.BeginPageHeaderContainer(pageSetting))
{

}

@if (!isPopup)
{

    using (Html.BeginForm_AceStyle((string)ViewBag.Title, pageSetting.ActionName, pageSetting.ModuleName, null, FormMethod.Post, new { @class = "form-horizontal" }))
    {
        <div id="validateDiv" style="display:none;">
            <small class="text-danger" id="validateMessage"></small>
        </div>
        <div style="margin-bottom:5px;">
            @Html.DropDownListFor(model => model.TypeTemplate, SelectListHelper.GetSelectList_CrmTemplate(), new { disabled = "disabled" })
        </div>
        <div style="margin-bottom:5px;">
            @Html.DropDownListFor(model => model.TypeLead, SelectListHelper.GetTypeLead_CrmTemplate(), new { disabled = "disabled" })
        </div>


        <div id="contentEmailSection" style="display:none;">
            @Html.CustomTextboxFor(model => model.TileEmail, null, null, WidthType.span12)

            @Html.TextAreaFor(model => model.ContentEmail, new { @class = "ckeditor", rows = 3, disabled = "disabled" })
        </div>
        <div id="contentRuleSection" style="display:none;">
            @Html.LabelFor(model => model.ContentRule)
            @Html.TextAreaFor(model => model.ContentRule, new { @class = "form-control", @rows = 10, style = "height: auto !important;", disabled = "disabled" })
        </div>
        <div id="ZnsId" style="display:none; margin-top: 1rem;">
            @Html.LabelFor(model => model.ZNSId)
            @Html.TextAreaFor(model => model.ZNSId, new { @class = "form-control", @rows = 1, style = "height: auto !important;", disabled = "disabled" })
        </div>
        <div id="note" style="display:none;">
            @Html.LabelFor(model => model.Note)
            @Html.TextAreaFor(model => model.Note, new { @class = "form-control", rows = 3, disabled = "disabled" })
        </div>



        using (Html.BeginButtonContainer(pageSetting))
        {
            if (Erp.BackOffice.Filters.SecurityFilter.AccessRight("Index", "CrmTemplate", "Crm"))
            {
                <a class="btn btn-primary btn-mini" href="@Url.Action("Index", pageSetting.ModuleName)">
                    @Wording.BackToList
                </a>
            }
        }
    }
}
else
{
    @*@Html.Grid(Model).Columns(columns =>
        {
            //columns.Add().Titled(BuildCheckAll().ToHtmlString()).SetWidth(20).Sanitized(false).Encoded(false).RenderValueAs(n => CheckDeleteColumns(n.Id));
            columns.Add().Titled(Html.DisplayNameFor(u => u.FirstOrDefault().ContentRule).ToString()).Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnName(u.ContentRule, u.Id, isPopup));
        }).WithPaging(10)*@
}




@section Scripts {
    <link href="/Scripts/ckeditor/contents.css" rel="stylesheet" />
    <script src="/Scripts/ckeditor/ckeditor.js"></script>
    <script>
        $(document).ready(function () {
            // Configure CKEditor with custom toolbar for email composition
            CKEDITOR.replace('ContentEmail', {
                toolbar: [
                    { name: 'basicstyles', items: ['Bold', 'Italic', 'Underline', 'Strike', 'RemoveFormat'] },
                    { name: 'styles', items: ['Format', 'FontSize'] },
                    { name: 'colors', items: ['TextColor', 'BGColor'] },
                    { name: 'paragraph', items: ['JustifyLeft', 'JustifyCenter', 'JustifyRight', 'JustifyBlock'] },
                    { name: 'links', items: ['Link', 'Unlink'] },
                    { name: 'insert', items: ['Image', 'Table', 'HorizontalRule'] }
                ],
                // Remove unwanted plugins
                removePlugins: 'elementspath',
                // Set default CKEditor height
                height: 300,
            });
        });
    </script>
    <script>
        $(document).ready(function () {
            // Initial execution
            handleDropdownChange();

        });

        function handleDropdownChange() {
            var selectedValue = $('#TypeTemplate').val();

            // Show/hide sections based on selected value
            if (selectedValue == "3") {
                $('#contentEmailSection').show();
                $('#contentRuleSection').hide();
                $('#note').show();
            } else if (selectedValue == "1" || selectedValue == "2") {
                $('#contentEmailSection').hide();
                $('#contentRuleSection').show();
                $('#note').show();
            } else {
                $('#contentEmailSection').hide();
                $('#contentRuleSection').hide();
                $('#note').hide();
            }
            if (selectedValue == "2") {
                $('#ZnsId').show();
            }
            else {
                $('#ZnsId').hide();
            }
        }

    </script>
    @Html.ScriptBottom_ValidationMvc()
    @Html.ScriptBottom_ChosenStyle()
}
