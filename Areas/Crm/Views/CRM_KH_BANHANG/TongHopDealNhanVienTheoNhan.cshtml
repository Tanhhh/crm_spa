@model List<TongHopDealNhanVienTheoNhanViewModel>

@using Erp.BackOffice.App_GlobalResources
@using Erp.BackOffice.Crm.Models
@using Erp.BackOffice.Helpers
@using Erp.BackOffice.Areas.Cms.Models
@using GridMvc.Html

@{
    ViewBag.Title = "Theo dõi deal của nhân viên theo nhãn hàng";
    bool isPopup = Request["IsPopup"] != null && Request["IsPopup"].ToString().ToLower() == "true" ? true : false;
    if (isPopup)
    {
        Layout = "~/Views/Shared/_PopupLayout.cshtml";
    }
    else
    {
        Layout = "~/Views/Shared/ACE_AdminLayout.cshtml";
    }

    Erp.BackOffice.Models.PageSetting pageSetting = new Erp.BackOffice.Models.PageSetting
    {
        ModuleName = "CRM_KH_BANHANG",
        ActionName = "TongHopDealNhanVienTheoNhan",
        PageTitle = ViewBag.Title,
        DisplaySearchPanel = true,
        IsPopup = false,
        DisplayBackButton = false
    };
    var index = 1;
    string Month = Request["month"] != null ? Request["month"] : DateTime.Now.Month.ToString();
    string Year = Request["year"] != null ? Request["year"] : DateTime.Now.Year.ToString();
    var nguoilap = ViewBag.NguoiLap;
    List<Crm_LevelViewModel> Level = (List<Crm_LevelViewModel>)ViewBag.Level;
    List<Crm_PeriodViewModel> Period = (List<Crm_PeriodViewModel>)ViewBag.Period;
    Level = Level.Where(x => x.Name != "L1" && x.Name != "L6").ToList();
    IEnumerable<Erp.BackOffice.Areas.Administration.Models.UserViewModel> user = (IEnumerable<Erp.BackOffice.Areas.Administration.Models.UserViewModel>)ViewBag.user;    //IEnumerable<SelectListItem> Origin = Erp.BackOffice.Helpers.Common.GetSelectList_Category("Origin", null, "value");
    int month = DateTime.Now.Month;
    int year = DateTime.Now.Year;

    List<TongHopDealNhanVienTheoNhanViewModel>  targetonDeal = (List<TongHopDealNhanVienTheoNhanViewModel>)ViewBag.targetonDeal;
    List<TongHopDealNhanVienTheoNhanViewModel> chenhlechDeal = (List<TongHopDealNhanVienTheoNhanViewModel>)ViewBag.chenhlechDeal;
    List<TongHopDealNhanVienTheoNhanViewModel> revenueonTarget = (List <TongHopDealNhanVienTheoNhanViewModel>)ViewBag.revenueonTarget;


    }

<link href="@Url.Content("~/assets/css/Gridmvc.css")" rel="stylesheet" type="text/css" />
<script src="@Url.Content("~/Scripts/gridmvc.min.js")" type="text/javascript"></script>



@helper GridColumnName(string name, int id, int month, int year)
{


//CRM_KH_BANHANG_DEMO/Create/14791?month=10&year=2020
name = string.IsNullOrEmpty(name) ? "No Title" : name;
    <a target="_blank" href="@Url.Action("Create", "CRM_KH_BANHANG" , new { Id= id,month = month, year = year })">@name</a>
}

@helper GridColumnCategoryValue(object value)
{
var attr = Common.GetCategoryByValueOrId("value", value);
    <span>@(attr != null ? attr.Name : "")</span>
}

@helper CheckDeleteColumns(int Id)
{
    <label>
        <input class="ace class-delete-all" type="checkbox" name="DeleteId-checkbox" value="@Id">
        <span class="lbl"></span>
    </label>
}

@helper BuildCheckAll()
{
    <label>
        <input class="ace" type="checkbox" name="checkAll" id="checkAll" />
        <span class="lbl"></span>
    </label>
}

@using (Html.BeginPageHeaderContainer(pageSetting))
{
    <label>Người quản lý</label>
    <select id="NguoiLap" name="NguoiLap" style="width:200px">
        <option value="0">-Người quản lý</option>
        @foreach (var item in user.OrderBy(x => x.FullName))
        {
            <option value="@item.Id" @(nguoilap == item.Id ? "selected" : "") data-selected="0">@item.FullName</option>
        }
    </select>
    <input type="hidden" value="@Request["IsPopup"]" name="IsPopup" />
    <input type="hidden" value="@Request["jsCallback"]" name="jsCallback" />
    <p>
        <label>Tháng</label>
        <select id="month" name="month">
            @for (int i = 1; i <= 12; i++)
                {
                <option @(Month == i.ToString() ? "Selected" : "") value="@i">@i</option>
            }
        </select>
        <label>Năm</label>
        <select id="year" name="year">
            @for (int i = 2016; i <= (DateTime.Now.Year + 1) + 1; i++)
                {
                <option @(Year == i.ToString() ? "Selected" : "") value="@i">@i</option>
            }
        </select>

        <label>Nhãn hàng</label>
        <select id="CountForBrand" name="CountForBrand">
           
                <option @(Request["CountForBrand"] == "ANNAYAKE" ? "Selected" : "") value="ANNAYAKE">ANNAYAKE</option>
            <option @(Request["CountForBrand"] == "LEONOR GREYL" ? "Selected" : "") value="LEONOR GREYL">LEONOR GREYL</option>
            <option @(Request["CountForBrand"] == "ORLANE PARIS,DICHVU,CONGNGHECAO" ? "Selected" : "") value="ORLANE PARIS,DICHVU,CONGNGHECAO">ORLANE PARIS</option>
        </select>

    </p>

}

@if (ViewBag.SuccessMessage != null && ViewBag.SuccessMessage != "")
{
    <div class="alert alert-block alert-success">
        <button class="close" data-dismiss="alert" type="button">
            <i class="ace-icon fa fa-times"></i>
        </button>
        <i class="ace-icon fa fa-check green"></i>
        @ViewBag.SuccessMessage
    </div>
}

@if (ViewBag.FailedMessage != null && ViewBag.FailedMessage != "")
{
    <div class="alert alert-block alert-danger">
        <button class="close" data-dismiss="alert" type="button">
            <i class="ace-icon fa fa-times"></i>
        </button>
        <i class="ace-icon fa fa-warning red"></i>
        @ViewBag.FailedMessage
    </div>
}


<div class="table-responsive" id="cTable">
    <table id="dslv" class="table table-bordered">
        <thead>
            <tr><td colspan="5">SL DEAL THEO TARGET DỰA VÀO SỐ DEAL TỪ L</td></tr>
            <tr>
                <th></th>
                @foreach (var item in Level)
                {
                    <th>@item.Name</th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Period)
            {
                <tr>
                    <td>
                        @item.Name
                    </td>
                    @foreach (var itemtarget in Model.Where(x => x.Period == item.Id))
                    {
                        <td>@itemtarget.Target</td>
                    }
                </tr>
            }
            
        </tbody>
    </table>

    <table class="table table-bordered">
        <thead>
            <tr><td colspan="5">CHÊNH LỆCH SL DEAL SO TARGET</td></tr>
            <tr>
                <th></th>
                @foreach (var item in Level)
                {
                    <th>@item.Name</th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Period)
            {
                <tr>
                    <td>
                        @item.Name
                    </td>
                    @foreach (var itemtarget in chenhlechDeal.Where(x => x.Period == item.Id))
                    {
                        <td>@itemtarget.Target</td>
                    }
                </tr>
            }
        </tbody>
    </table>

    <table class="table table-bordered">
        <thead>
            <tr><td colspan="5">SL DEAL THEO TARGET TRÊN TỔNG DEAL</td></tr>
            <tr>
                <th></th>
                @foreach (var item in Level)
                {
                    <th>@item.Name</th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Period)
            {
                <tr>
                    <td>
                        @item.Name
                    </td>
                    @foreach (var itemtarget in targetonDeal.Where(x => x.Period == item.Id))
                    {
                        <td>@itemtarget.Target</td>
                    }
                </tr>
            }
        </tbody>
    </table>

    <table class="table table-bordered">
        <thead>
            <tr><td colspan="5">DS ĐẠT THEO TARGET % KH</td></tr>
            <tr>
                <th></th>
                @foreach (var item in Level)
                {
                    <th>@item.Name</th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Period)
            {
                <tr>
                    <td>
                        @item.Name
                    </td>
                    @foreach (var itemtarget in revenueonTarget.Where(x => x.Period == item.Id))
                    {
                        <td>@CommonSatic.ToCurrencyStr(itemtarget.Target,null)</td>
                    }
                </tr>
            }
        </tbody>
    </table>
</div>
@using (Html.BeginButtonContainer(pageSetting))
{
    <button class="btn btn-white btn-success btn-sm" type="button" value="Export" onclick="tableToExcel('cTable', 'TheoDoiKeHoachNhanVien')">
        <i class="ace-icon fa fa-file-excel-o"></i>
        Xuất excel
    </button>
}

@section Scripts {
    <script type="text/javascript">
        function CheckIsval() {
            if ($('[name="DeleteId-checkbox"]').is(':checked') == false) {
                alert("Phải chọn ít nhất 1 item.");
                return false;
            }
            else {
                if (confirm('Bạn có chắc muốn xóa các item đã chọn ?')) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }

        $('[name="Delete"]').click(function () {
            if (confirm('Bạn có chắc muốn xóa item ?')) {
                $(this).closest('tr').children('td').each(function (i, e) {
                    // $(this).find("input.class-delete-all").prop("checked", true);
                    return true;
                })
            }
            else {
                return false;
            }

        })

        $('.grid-header').mouseover(function () {
            $('.grid-header')[0].title = "Chọn tất cả";
        });

        $('.class-delete-all').on('click', function () {
            if ($('.class-delete-all:checked').length == $('.class-delete-all').length) {
                $('#checkAll').prop('checked', true);
            } else {
                $('#checkAll').prop('checked', false);
            }
        });



        var tableToExcel = (function () {
            var uri = 'data:application/vnd.ms-excel;base64,'
                , template = '<html xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:x="urn:schemas-microsoft-com:office:excel" xmlns="http://www.w3.org/TR/REC-html40"><head><!--[if gte mso 9]><xml><x:ExcelWorkbook><x:ExcelWorksheets><x:ExcelWorksheet><x:Name>{worksheet}</x:Name><x:WorksheetOptions><x:DisplayGridlines/></x:WorksheetOptions></x:ExcelWorksheet></x:ExcelWorksheets></x:ExcelWorkbook></xml><![endif]--></head><body><table>{table}</table></body></html>'
                , base64 = function (s) { return window.btoa(unescape(encodeURIComponent(s))) }
                , format = function (s, c) { return s.replace(/{(\w+)}/g, function (m, p) { return c[p]; }) }

            return function (table, name) {
                if (!table.nodeType) table = document.getElementById(table)
                var ctx = { worksheet: name || 'Worksheet', table: table.innerHTML }
                window.location.href = uri + base64(format(template, ctx))
            }
        })()
    </script>
}
