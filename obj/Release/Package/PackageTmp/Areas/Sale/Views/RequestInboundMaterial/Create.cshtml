@using Erp.BackOffice.App_GlobalResources
@using Erp.BackOffice.Helpers
@using Erp.BackOffice.Sale.Models

@model RequestInboundViewModel

@{
    if (Model.Id > 0)
    {
        ViewBag.Title = "Cập nhật yêu cầu nhập kho";
    }
    else
    {
        ViewBag.Title = "Tạo yêu cầu nhập kho";
    }
    Layout = "~/Views/Shared/" + (Request["IsPopup"] == null ? "ACE_AdminLayout.cshtml" : "_PopupLayout.cshtml");

    Erp.BackOffice.Models.PageSetting pageSetting = new Erp.BackOffice.Models.PageSetting
    {
        ModuleName = "RequestInboundMaterial",
        ActionName = "Create",
        PageTitle = ViewBag.Title,
        DisplaySearchPanel = false,
        IsPopup = false,
        DisplayBackButton = true
    };
    //IEnumerable<PurchaseOrderViewModel> orderList = (IEnumerable<PurchaseOrderViewModel>)ViewBag.orderList;
    IEnumerable<SelectListItem> warehouseList = (IEnumerable<SelectListItem>)ViewBag.warehouseList;
    IEnumerable<SelectListItem> supplierList = (IEnumerable<SelectListItem>)ViewBag.supplierList;
    //IEnumerable<SelectListItem> drugStoreList = Erp.BackOffice.Helpers.SelectListHelper.GetSelectList_DepartmentAllNew(Model.BranchId, Wording.Empty);
    List<MaterialViewModel> materialList = (List<MaterialViewModel>)ViewBag.materialList;
    IEnumerable<SelectListItem> productCategoryList = Erp.BackOffice.Helpers.Common.GetSelectList_Category("product", null, "value");
}

@section HeadOfPage {
    @Html.ScriptTop_ChosenStyle()
}
<style type="text/css">
    .row {
        max-width: 100%;
    }

    .col-sm-7 {
        width: 60%;
        float: left;
    }

    .col-sm-5 {
        width: 40%;
        float: left;
    }

    #popup_archive2 {
        position: center;
        bottom: 30%;
        left: 20%;
        width: 60%;
        height: 535px;
        max-width: 500px;
        /*top: 30%;*/
        right: 30%;
        /*max-height: 100%;*/
        /* overflow-y:scroll;*/
    }

    #chitiet {
        position: relative;
        /* bottom: 50%; */
        left: 80%;
        /* right: 0%; */
        top: auto;
        margin-bottom: 10px;
    }

    #mauexcel {
        border-radius: 5px;
        padding: 15px 60px;
        top: 30%;
        position: relative;
        left: 30%;
        font-size: 16px;
    }

    #exceltable {
        width: 100%;
        overflow-y: scroll !important;
        max-height: 300px !important;
    }

    #addproduct, #viewfile {
        width: 80px;
    }

    #scrolltable {
        margin-top: 20px;
        height: 200px;
        overflow: auto;
    }
</style>
@using (Html.BeginPageHeaderContainer(pageSetting))
{

}

@using (Html.BeginForm_AceStyle((string)ViewBag.Title, pageSetting.ActionName, pageSetting.ModuleName, null, FormMethod.Post, new { id = "CreateRequestInbound", @class = "form-horizontal" }))
{
    @Html.ValidationSummary(true)
    if (Model.Id == 0)
    {
        @Html.HiddenFor(model => model.CreatedUserName)
    }
    else
    {
        @Html.HiddenFor(model => model.Id)
        @Html.HiddenFor(model => model.CreatedUserId)
        @Html.HiddenFor(model => model.CreatedDate)
        @Html.HiddenFor(model => model.IsDeleted)
        @Html.HiddenFor(model => model.Code)
        @Html.HiddenFor(model => model.BarCode)
        @Html.HiddenFor(model => model.Status)
        @*@Html.HiddenFor(model => model.BranchId)*@
    }
    <input type="hidden" value="@Request["IsPopup"]" name="IsPopup" />
    <div class="row">
        <div class="col-sm-7">
            <div class="product-search-box">
                <input id="product_barcode" type="text" placeholder="Mã sản phẩm..." autocomplete="off" style="width:30%" />
                <select id="productSelectList" name="productSelectList" style="width:30%">
                    <option value="">- Tìm sản phẩm -</option>
                    @foreach (var item in materialList.OrderBy(x => x.Name))
                    {
                        <option value="@item.Id" data-selected="0" data-value="@item.Id | @item.Image_Name | @(item.Code + " - " + item.Name + " (" + CommonSatic.ToCurrencyStr(item.PriceOutbound,null) + ")")" data-code="@item.Code" data-barcode="@item.Barcode" data-product-type="@item.CategoryCode" data-price="@(item.PriceOutbound)" data-unit="@item.Unit">@item.Code - @item.Name</option>
                    }
                </select>
            </div>

            <div id="listOrderDetail" class="table-responsive top-10">
                <a class="btn btn-primary btn-mini btn-sm" data-toggle="collapse" data-target="#popup_archive2" id="chitiet" style="border-radius:5px;">
                    <i class="ace-icon fa fa-cloud-upload"></i>
                    Nhập excel
                </a>
                <table class="table table-bordered">
                    <thead>
                        <tr>
                            <th style="width:5%">STT</th>
                            <th>Tên sản phẩm</th>
                            <th style="width:10%">Số lượng</th>
                            <th style="width:15%">Đơn giá</th>
                            <th style="width:15%">Thành tiền</th>
                            <th style="width:50px;"></th>
                        </tr>
                    </thead>
                    <tbody class="detailList">
                        @if (Model.DetailList != null && Model.DetailList.Count > 0)
                        {
                            foreach (var item in Model.DetailList)
                            {
                                @Html.Partial("LoadProductItem", item);
                            }
                        }
                    </tbody>
                    <tfoot>
                        <tr>
                            <td>
                                <input style="width:30px;" autocomplete="off" data-val="true" data-val-required="Vui lòng chọn sản phẩm!" id="ProductItemCount" name="ProductItemCount" type="text" value="@(Model.DetailList != null && Model.DetailList.Count > 0 ? Model.DetailList.Count.ToString() : "")" readonly="readonly" />
                            </td>
                            <td></td>
                            <td id="TongSoLuong" align="right" style="font-weight:bold"></td>
                            <td colspan="2"></td>
                            <td id="TongThanhTien" align="right" style="font-weight:bold"></td>
                        </tr>
                    </tfoot>
                </table>
                <span style="color:red" class="field-validation-valid help-inline" data-valmsg-for="ProductItemCount" data-valmsg-replace="true"></span>
            </div>
        </div>
        <div class="col-sm-5">
            <div class="widget-box" id="widget-box-1">
                <div class="widget-header">
                    <h5 class="widget-title">Thông tin chi tiết</h5>
                </div>
                <div class="widget-body">
                    <div class="widget-main">
                        @if (warehouseList.Count() <= 0)
                        {
                            <div class="alert alert-danger">
                                <button type="button" class="close" data-dismiss="alert">
                                    <i class="ace-icon fa fa-times"></i>
                                </button>

                                <strong>
                                    <i class="ace-icon fa fa-times"></i>
                                    Thông báo!
                                </strong>
                                Bạn chưa được phân quyền quản lý kho. Không thể lập phiếu yêu cầu
                                <br>
                            </div>
                        }
                        @Html.CustomDropDownListFor(model => model.WarehouseDestinationId, warehouseList, WidthType.span12, true, null, DropdownListStyle.DropdownListStyleChosen)
                        @Html.CustomTextboxFor(model => model.TotalAmount, null, null, WidthType.span12, true, new Dictionary<string, object> { { "class", "col-sm-12 numberinput2" }, { "disabled", "disabled" } })
                        @Html.CustomTextAreaFor(model => model.Note, Wording.Note, WidthType.span12, true, null, "hide", "full-w")
                    </div>
                </div>
            </div>
            <div class="downloadFIle" style="padding-top:10px; height:30%">
                <a class="btn btn-white btn-success btn-sm" id="mauexcel" href="@Url.Action("PrintExample","RequestInbound")">
                    <i class="fa fa-cloud-download fa-1x" aria-hidden="true"></i>
                    Tải file mẫu
                </a>
            </div>
        </div>
    </div>
    <div class="mini-popup">
        <div id="popup_archive2" class="popover fade top">
            <h3 class="popover-title"><i class="ace-icon fa fa-arrow-circle-right"></i> Import excel</h3>
            <div class="popover-content">
                <div class="row-1">
                    <div class="col-sm-12">
                        <label for="excelfile">Chọn File Excel</label>
                        <input type="file" id="excelfile" style="border-radius:5px;" accept=".xls,.xlsx" />
                        <input type="button" id="viewfile" value="Xem trước" style="border-radius:5px;" />
                        <br />
                        <br />
                        <div id="scrolltable">
                            <table id="exceltable" class="table table-bordered" style="border-radius:5px;">
                                @*<thead>
                                        <tr>
                                            <th style="width:5%">STT</th>
                                            <th style="width:20%">Mã Sản Phẩm</th>
                                            <th style="width:15%">Số lượng</th>
                                            <th style="width:15%">Đơn Giá</th>
                                        </tr>
                                    </thead>*@
                            </table>
                        </div>
                        <p class="top-10">
                            <input class="btn btn-white btn-success btn-sm hideinput" data-toggle="collapse" data-target="#popup_archive2" id="addproduct" value="Import" name="Save" type="button" style="border-radius:5px;" />
                            <a class="btn btn-white btn-sm no-border" data-toggle="collapse" id="closepopup" data-target="#popup_archive2" style="border-radius: 5px; margin-top: 5px">Đóng</a>
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </div>
    using (Html.BeginButtonContainer(pageSetting))
    {
        <a class="btn btn-mini btn-primary" id="Save" name="Save" value="Save">
            <i class="ace-icon fa fa-save"></i>
            @Wording.Save
        </a>
    }
}

@section Scripts {
    @Html.ScriptBottom_ValidationMvc()
    @Html.ScriptBottom_ChosenStyle()
    @Html.ScriptBottom_DatePicker("dd/MM/yyyy")

    <link href="/Scripts/RadCombobox_v1/RadComboBoxLite.css" rel="stylesheet" />
    <script src="/Scripts/RadCombobox_v1/rabCombobox.js"></script>
    <script src="/Scripts/combojax.js?=vs1.011"></script>
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.13.5/xlsx.full.min.js"></script>
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.13.5/jszip.js"></script>
    <script>
        //truyền từ action create của controller qua khi thực hiện submit và return về lại view create, để nhận biết là được gọi theo dạng popup
        var closePopup = '@ViewBag.closePopup';
        $(document).ready(function () {
            //nếu là được gọi theo dạng popup từ form khác thì chạy đoạn code bên dưới
            if (closePopup != '') {
                var option = '<option value="@Model.Id" >@Model.Code</option>';
                //tên funtion có thể khác theo từng công việc riêng (đây chỉ là mẫu khi thêm mới sẽ gọi lại)
                window.parent.ClosePopupAndAppendSelect(option);
            }
        });
        var PO_Id = '@Request["POId"]';

        $(document).ready(function () {
            LoadNumberInput();
            $('#Save').click(function () {
                ClearFormatBeforeSubmit($("#CreateRequestInbound"));
                $("#CreateRequestInbound").submit();
            });
            //init rcb chọn sản phẩm
            $('#productSelectList').radComboBox({
                colTitle: 'ID, Hình, Tên sản phẩm',
                colValue: 1,
                colImage: 2,
                colHide: '1',
                colSize: '0px,50px,',
                colClass: ',,',
                //width: 600,
                height: 300,
                boxSearch: true,
                colSearch: 2
            });

            //$('#TotalAmount').numberFormat();
            //$('.detail_item_price').numberFormat('before');
            //$('#PaymentViewModel_Amount').val('0').numberFormat();

            //chọn payment method mặc đỉnh để validate
            //$('#PaymentViewModel_PaymentMethod').val($('#PaymentViewModel_PaymentMethod option:last-child').attr('value'));

            if (PO_Id != '') {
                $('#PurchaseOrderId').val(PO_Id).trigger('chosen:updated');
                loadPurchaseOrderById();
            }


            //Hiển thị giá và tính thành tiền khi chọn sản phẩm
            $('#productSelectList').on('change', function () {
                var $this = $(this);
                var selected = $this.find("option:selected");

                if (selected.val() == '' || $('#product_item_' + selected.val()).length > 0)
                    return;

                var OrderNo = $('.detailList tr').length;
                var MaterialId = selected.val();
                var MaterialName = selected.text();
                var Unit = selected.data("unit");
                var Quantity = 1;
                var Price = selected.data("price");
                var MaterialType = selected.data("product-type");
                var MaterialCode = selected.data("code");

                var formdata = {
                    OrderNo: OrderNo,
                    MaterialId: MaterialId,
                    MaterialName: MaterialName,
                    Unit: Unit,
                    Quantity: Quantity,
                    Price: Price,
                    MaterialType: MaterialType,
                    MaterialCode: MaterialCode
                };

                $("#listOrderDetail tbody tr").each(function () {
                    debugger
                    var row = $(this);
                    var w = $(window);
                    //$(this).removeClass('selected_grey').addClass("text_data");

                    var ProductCode1 = $(this).closest('tr').find("td:eq(1) input").val();

                    //alert($('#product_barcode3').val());
                    if (MaterialId == ProductCode1) {
                        //alert(ProductId);
                        $(this).closest('tr').find("input:nth-child(2)").val(parseInt(removeComma($(this).closest('tr').find("input:nth-child(2)").val())) + 1);
                        $(this).closest('tr').find("input:nth-child(2)").trigger('change');
                        //$(this).addClass('selected_grey');
                        //var body = $("html,#listOrderDetail");
                        //body.stop().animate({ scrollTop: row.offset().top - (w.height() / 1.6) }, 500, 'swing', function () {
                        // row.addClass('scrollCode');
                        //});
                        formdata = {};
                        return;
                    } else {
                        //$(this).removeClass("scrollCode");
                    }
                    //alert(ProductId);

                });

                //Thêm dòng mới
                ClickEventHandler(true, "/RequestInboundMaterial/LoadProductItem", ".detailList", formdata, function () {
                    $('#ProductItemCount').val($('#listOrderDetail .detailList tr').length);
                 //   LoadNumberInput();
                    calcTotalAmount();
                    $("#DetailList_" + formdata.OrderNo + "_Quantity").focus().select();
                });
            });

            $('#listOrderDetail').on('focus', '.detail_item_price', function () {
                $(this).select();
            });

            $('#listOrderDetail').on('focus', '.detail_item_qty', function () {
                $(this).select();
            });

            // tính thành tiền và tổng cộng
            $('#listOrderDetail').on('change', '.detail_item_qty', function () {
                $(this).val($(this).val().replace(/\-/g, ''));
                $(this).val($(this).val().replace(/[^0-9.,]/g, ''));
                var ralVal = numeral($(this).val());
                if (ralVal <= 0) {
                    $(this).val(1);
                }
                var $this = $(this);
                var id = $this.closest('tr').data('id');
                //tính tổng cộng
                calcAmountItem(id);
                calcTotalAmount();
            });

            $('#listOrderDetail').on('change', '.detail-product-price .detail_item_price:not(.mask-format-currency)', function () {
                var $this = $(this);
                var id = $this.closest('tr').data('id');
                calcAmountItem(id, 'price');
                calcTotalAmount();
            });

            $('#listOrderDetail').on('keypress', '.detail-product-price, .detail_item_qty', function (e) {
                if (e.which == 13) {
                    e.preventDefault();
                }
            });

            $('#product_barcode').keypress(function (e) {
                if (e.which == 13) {
                    e.preventDefault();
                    $('#product_barcode').trigger('change');
                }
            });

            //khi nhập barcode
            $('#product_barcode').change(function () {
                var $this = $(this);
                if ($this.val() != '') {

                    var barcode = $this.val();
                    //đặt lại giá trị rỗng
                    $this.val('').focus();

                    var valueSearch = searchProductByBarCodeContain(barcode);
                    if (valueSearch == undefined) {
                        alert('Không tìm thấy sản phẩm với mã code trên!');
                        return;
                    }

                    $('#productSelectList').val(valueSearch).trigger("change");
                }
            });

            // xóa sản phẩm
            $('#listOrderDetail').on('click', '.btn-delete-item', function () {
                //$(this).closest('tr').next('tr.template_location').remove();
                $(this).closest('tr').remove();

                var countItem = $('.detailList tr').length;
                $('#ProductItemCount').val(countItem);

                if (countItem == 0) {
                    $('#ProductItemCount').val('');
                    $('#TongSoLuong').text('');
                    $('#TongThanhTien').text('');
                }
                calcTotalAmount();

                $('.detailList tr').each(function (index, tr) {
                    $(tr).attr('role', index + 1).attr("id", "product_item_" + index).data("id", index).attr("data-id",index);
                    $(tr).find('td:first-child').text(index + 1);

                    $(tr).find('.detail_item_id input').attr('name', 'DetailList[' + index + '].MaterialId').attr('id', 'DetailList_' + index + '__MaterialId');
                    $(tr).find('.detail_item_qty').attr('name', 'DetailList[' + index + '].Quantity').attr('id', 'DetailList_' + index + '_Quantity').attr('aria-describedby', 'DetailList_' + index + '_Quantity-error');
                    $(tr).find('.field-validation-valid').attr('data-valmsg-for', 'DetailList_' + index + '_Quantity');
                    $(tr).find('.detail_item_price').filter(':not(.mask-format-currency)').attr('name', 'DetailList[' + index + '].Price').attr('id', 'DetailList_' + index + '__Price');
                    $(tr).find('.detail_item_unit').attr('name', 'DetailList[' + index + '].Unit');
                });
            });
        });

        function searchProductByBarCodeContain(barcode) {
            barcode = barcode.toLowerCase();
            //var $productSelect = $('.detail_item_id').first();

            var $optionList = $("#productSelectList").find('option');

            var arrResulft = [];
            for (var i = 0; i < $optionList.length; i++) {
                var data_code = $($optionList[i]).data('code') != undefined ? $($optionList[i]).data('code').toString().toLowerCase() : undefined;
                if (barcode.indexOf(data_code) != -1)
                    arrResulft.push($($optionList[i]).attr('value'));

                if (arrResulft.length == 1) {
                    return arrResulft[0];
                }
            }

            return arrResulft[0];
        };

        function calcAmountItem(id, priceFrom) {
            var input_price = $('#DetailList_' + id + '__Price');
            var _price = input_price.val() != '' ? removeComma(input_price.val()) : 0;
            var $qty = $('tr#product_item_' + id).find('.detail_item_qty');
            var qty = 1;
            if ($qty.val() == '') {
                $qty.val(1);
            } else {
                qty = parseInt(removeComma($qty.val())) < 0 ? parseInt(removeComma($qty.val())) * -1 : parseInt(removeComma($qty.val()));
            }
            var total = parseFloat(_price) * qty;
            $('tr#product_item_' + id).find('.detail_item_total').text(numeral(total).format('0,0'));
        };

        function calcTotalAmount() {
            var total = 0;
            var total1 = 0;

            var selector = '.detailList tr';
            $(selector).each(function (index, elem) {
                if ($(elem).find('.detail_item_total').text() != '') { // la số thì mới tính
                    total += parseFloat(removeComma($(elem).find('.detail_item_total').text()));
                    $("#TongThanhTien").text(numeral(total).format('0,0'));
                    //$(elem).find('.detail_item_total').text(numeral($(elem).find('.detail_item_total').text()).format('0,0'));
                }

                if ($(elem).find('.detail_item_qty').val() != '') { // la số thì mới tính
                    total1 += parseInt($(elem).find('.detail_item_qty').val().replace(/\-./g, ''));
                    $("#TongSoLuong").text(currencyFormat(total1));
                }

                if (index == $(selector).length - 1) {
                    $('#mask-TotalAmount').val(numeral(total).format('0,0'));
                    $('#TotalAmount').val(numeral(total).format('0,0'));
                }
            });
        };

        function checkChosenProductOnTable() {
            var flag = true;
            if ($('#PurchaseOrderId').val() == '') {
                $('.detailList select.detail_item_id').each(function (index, elem) {
                    if ($(elem).val() == '') {
                        var message = $(elem).data('val-required') != undefined ? $(elem).data('val-required') : 'Chưa chọn sản phẩm!';
                        $(elem).next('span').text(message);
                        flag = false;
                    }
                });
            }
            return flag;
        }
        function parseValidatorForm(form) {
            //jQuery.noConflict();

            // if the form is in a dialog box {
            var form = $(form);
            form.removeData('validator').removeData('nobtrusiveValidation');
            $.validator.unobtrusive.parse(form); // }

            $.fn.extend({
                // form validation {
                isValid: function () {
                    var self = $(this);
                    $.validator.unobtrusive.parse(self);
                    return self.data('unobtrusiveValidation').validate();
                } // }
            });
        };

        $(document).ready(function () {
            $("#ProductItemCount").attr("readonly", "true");
        });

        $("body").on("click", "#viewfile", function () {
            var fileUpload = $("#excelfile")[0];
            debugger
            var regex = /^([a-zA-Z0-9\s_\\.\-:])+(.xls|.xlsx)$/;
            if (regex.test(fileUpload.value.toLowerCase())) {
                if (typeof (FileReader) != "undefined") {
                    var reader = new FileReader();

                    //For Browsers other than IE.
                    if (reader.readAsBinaryString) {
                        reader.onload = function (e) {
                            ProcessExcel(e.target.result);
                        };
                        reader.readAsBinaryString(fileUpload.files[0]);
                    } else {
                        //For IE Browser.
                        reader.onload = function (e) {
                            var data = "";
                            var bytes = new Uint8Array(e.target.result);
                            for (var i = 0; i < bytes.byteLength; i++) {
                                data += String.fromCharCode(bytes[i]);
                            }
                            ProcessExcel(data);
                        };
                        reader.readAsArrayBuffer(fileUpload.files[0]);
                    }
                } else {
                    alert("This browser does not support HTML5.");
                }
            } else {
                alert("Please upload a valid Excel file.");
            }
        });
        function ProcessExcel(data) {
            //Read the Excel File data.
            var workbook = XLSX.read(data, {
                type: 'binary'
            });

            //Fetch the name of First Sheet.
            var firstSheet = workbook.SheetNames[0];

            //Read all rows from First Sheet into an JSON array.
            var excelRows = XLSX.utils.sheet_to_row_object_array(workbook.Sheets[firstSheet]);

            //Create a HTML Table element.
            var table = $("<table/>");
            table[0].border = "1";
            table[0].id = "exceltable";
            table[0].addClass = "table table-bordered";

            //Add the header row.
            var row = $(table[0].insertRow(-1));

            //Add the header cells.
            var headerCell = $("<th/>");
            headerCell.html("STT");
            headerCell.css("width", "20%");
            row.append(headerCell);

            var headerCell = $("<th/>");
            headerCell.html("MaSanPham");
            row.append(headerCell);

            var headerCell = $("<th/>");
            headerCell.html("SoLuong");
            row.append(headerCell);

            var headerCell = $("<th/>");
            headerCell.html("DonGia");
            row.append(headerCell);
            //Add the data rows from Excel file.
            for (var i = 0; i < excelRows.length; i++) {
                debugger
                //Add the data row.
                var row = $(table[0].insertRow(-1));

                //Add the data cells.
                var cell = $("<td/> ");
                cell.html(excelRows[i].STT);
                cell.css("width", "20%");
                row.append(cell);

                cell = $("<td/> ");
                cell.html(excelRows[i].MaSanPham);
                cell.css("width", "40%");
                row.append(cell);

                cell = $("<td/> ");
                cell.html(excelRows[i].SoLuong);
                cell.css("width", "20%");
                cell.css("text-align", "center");
                row.append(cell);

                cell = $("<td/>");
                cell.html(excelRows[i].DonGia);
                cell.css("width", "20%");
                cell.css("text-align", "center");
                row.append(cell);
            }

            var dvExcel = $("#scrolltable");
            dvExcel.html("");
            dvExcel.append(table);
        };
        function BindTable(jsondata, tableid) {/*Function used to convert the JSON array to Html Table*/
            var columns = BindTableHeader(jsondata, tableid); /*Gets all the column headings of Excel*/
            for (var i = 0; i < jsondata.length; i++) {
                var row$ = $('<tr/>');
                for (var colIndex = 0; colIndex < columns.length; colIndex++) {
                    var cellValue = jsondata[i][columns[colIndex]];
                    if (cellValue == null)
                        cellValue = "";
                    row$.append($('<td/>').html(cellValue));
                }
                $(tableid).append(row$);
            }
        }
        function BindTableHeader(jsondata, tableid) {/*Function used to get all column names from JSON and bind the html table header*/
            var columnSet = [];
            var headerTr$ = $('<tr/>');
            for (var i = 0; i < jsondata.length; i++) {
                var rowHash = jsondata[i];
                for (var key in rowHash) {
                    if (rowHash.hasOwnProperty(key)) {
                        if ($.inArray(key, columnSet) == -1) {/*Adding each unique column names to a variable array*/
                            columnSet.push(key);
                            headerTr$.append($('<th/>').html(key));
                        }
                    }
                }
            }
            $(tableid).append(headerTr$);
            return columnSet;
        }
        $("body").on("click", "#addproduct", function (e) {
            //var a = $('.detailList').find("tr:eq(0)").find("td:eq(1)").html();
            ////ShowLoading();

            //if (a == null) {
            e.preventDefault();
            var stt = 0;
            var ListForm = Array();

            var WarehouseId = $("#WarehouseDestinationId").find("option:selected").val();

            document.getElementById("exceltable").deleteRow(0);
            //ShowLoading();
            $("#exceltable TBODY TR").each(function () {
                var row = $(this);

                var OrderNo = row.find("TD").eq(0).html();
                var ProductCode = row.find("TD").eq(1).html();
                var Quantity = row.find("TD").eq(2).html();
                var price = row.find("TD").eq(3).html();

                var formdata = {
                    STT: OrderNo,
                    MaSanPham: ProductCode,
                    SoLuong: Quantity,
                    DonGia: price,
                    WarehouseId: WarehouseId
                };
                ListForm.push(formdata);

                row.remove();
            });
            //ShowLoading();
            $.ajax({
                type: "POST",
                url: "/RequestInboundMaterial/ImportExcel",
                data: JSON.stringify(ListForm),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (r) {
                    //location.reload();
                    //ShowLoading();
                    $(".detailList").html(r);
                    debugger
                    var countItem = $('.detailList tr.detail_item').length;
                    $('#ProductItemCount').val(countItem);
                    calcTotalAmount();

                    var irow = 1;
                    $("#listOrderDetail tbody tr").each(function () {
                        var row = $(this);
                        if (irow == $('.detailList tr.detail_item').length) {
                            $(this).closest('tr').remove();

                            var countItem = $('.detailList tr.detail_item').length;
                            $('#ProductItemCount').val(countItem);

                            if (countItem == 0) {
                                $('#ProductItemCount').val('');
                                $('#TongSoLuong').text('');
                                $('#TongThanhTien').text('');
                            }
                            calcTotalAmount();

                            $('.detailList tr.detail_item').each(function (index, tr) {
                                debugger
                                $(tr).attr('data-id', index);
                                $(tr).find('td:first-child').text(index);
                                $(tr).find('.item_material_id').attr('name', 'DetailList[' + index + '].MaterialId').attr('id', 'DetailList_' + index + '__MaterialId');
                                $(tr).find('.item_id').attr('name', 'DetailList[' + index + '].Id').attr('id', 'DetailList_' + index + '__Id');
                                $(tr).find('.item_quantity').attr('name', 'DetailList[' + index + '].Quantity').attr('id', 'DetailList_' + index + '__Quantity');
                                $(tr).find('.item_price').attr('name', 'DetailList[' + index + '].Price').attr('id', 'DetailList_' + index + '__Price');
                                $(tr).find('.item_locode').attr('name', 'DetailList[' + index + '].LoCode').attr('id', 'DetailList_' + index + '__LoCode');
                                $(tr).find('.item_expiry_date').attr('name', 'DetailList[' + index + '].ExpiryDate').attr('id', 'DetailList_' + index + '__ExpiryDate');
                                $(tr).find('.item_unit').attr('name', 'DetailList[' + index + '].Unit').attr('id', 'DetailList_' + index + '__Unit');
                            });
                        }
                        irow = irow + 1;

                    });

                    HideLoading();
                }
            });

            $('#addproduct').addClass('hideinput');
            $("#exceltable TBODY").remove();


        });
        $("#closepopup").click(function () {
            $("#exceltable TBODY").remove();
            document.getElementById("excelfile").value = "";
        });
        $("#viewfile").click(function () {
            $("#addproduct").removeClass('hideinput');
        });
    </script>
   
}
