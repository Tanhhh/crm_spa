@model  IEnumerable<StatusViewModel>
    @using Erp.BackOffice.App_GlobalResources
    @using Erp.BackOffice.Crm.Models
    @using Erp.BackOffice.Helpers
    @using GridMvc.Html

    @{
        ViewBag.Title = "Danh sách trạng thái";
        bool isPopup = Request["IsPopup"] != null && Request["IsPopup"].ToString().ToLower() == "true" ? true : false;
        if (isPopup)
        {
            Layout = "~/Views/Shared/_PopupLayout.cshtml";
        }
        else
        {
            Layout = "~/Views/Shared/ACE_AdminLayout.cshtml";
        }
        Erp.BackOffice.Models.PageSetting pageSetting = new Erp.BackOffice.Models.PageSetting
        {
            ModuleName = "StatusLead",
            ActionName = "Index",
            PageTitle = ViewBag.Title,
            DisplaySearchPanel = true,
            IsPopup = false,
            DisplayBackButton = false
        };
    }
    <link href="@Url.Content("~/assets/css/Gridmvc.css")" rel="stylesheet" type="text/css" />
    <script src="@Url.Content("~/Scripts/gridmvc.min.js")" type="text/javascript"></script>
    <script src="~/assets/js/jquery.2.1.1.min.js"></script>
    <link href="~/assets/toastr/toastr.min.css" rel="stylesheet" />
    <script src="~/assets/toastr/toastr.min.js"></script>

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>
    @helper GridColumnCommand(int id,int? OrderStatus,int? Type)
    {
        <div class="hidden-phone visible-desktop action-buttons" style="display: inline-block; float: left;">
            <p>
                @if (Erp.BackOffice.Filters.SecurityFilter.AccessRight("EditStatus", "StatusLead", "Crm"))
                {
                    <button id="btnEdit_@id" name="Edit" value="@id" class="btn btn-mini btn-success btnEdit">
                        <i class="ace-icon fa fa-edit"></i>
                    </button>
                }
                @if (Erp.BackOffice.Filters.SecurityFilter.AccessRight("Delete", "StatusLead", "Crm"))
                {
                    <button id="btnDelete_@id" name="Delete" value="@id" class="btn btn-mini btn-danger btnDelete">
                        <i class="ace-icon fa fa-trash bigger-120"></i>
                    </button>
                }
                @if (Erp.BackOffice.Filters.SecurityFilter.AccessRight("Create", "StatusLead", "Crm"))
                {
                    <button id="btnCreate_@id" name="Create" value="@OrderStatus.Value,@Type.Value" class="btn btn-mini btn-primary btnCreate">
                        <i class="ace-icon fa fa-plus bigger-120"></i>
                    </button>
                }
            </p>
        </div>
    }
    @helper GridColumnEndStatus(string endStatus)
    {
        var typeMappings = new Dictionary<string, string>
{
    { "True", "Mua" },
    { "False", "Không mua" },
    {"","-Rỗng-" }
};
        if (typeMappings.ContainsKey(endStatus))
        {
            @Html.Raw(typeMappings[endStatus]);
        }
        else { }
    }
    @helper GridColumnType(string type)
    {
        var typeMappings = new Dictionary<string, string>
{
    { "1", "Lead" },
{ "2", "Contact" }
};
        if (typeMappings.ContainsKey(type))
        {
            @Html.Raw(typeMappings[type]);
        }
        else { }
    }
    @helper GridColumnForecast(string type)
    {
        var typeMappings = new Dictionary<string, string>
{
    { "1", "Đang thực hiện" },
{ "2", "Cơ hội cao" },
    { "3", "Cam kết" },
{ "4", "Kết thúc thắng" },
    { "5", "Mất khách hàng" }

};
        if (typeMappings.ContainsKey(type))
        {
            @Html.Raw(typeMappings[type]);
        }
        else { }
    }

    @helper GridColumnColor(string color)
    {
        <div style="display: flex; justify-content: center; align-items: center; background-color:@color; color:#C0C0C0;">@color</div>
    }

    @using (Html.BeginPageHeaderContainer(pageSetting))
    {
        <label>Loại trạng thái</label>
        <select data-val="true" data-val-required="Bắt buộc nhập" id="iType" name="iType" style="width:207px" onchange="onTypeChange()">
            <option value="0" @(ViewBag.DataType == 0 ? "selected" : "")>All</option>
            <option value="1" @(ViewBag.DataType == 1 ? "selected" : "")>Lead</option>
            <option value="2" @(ViewBag.DataType == 2 ? "selected" : "")>Contact</option>
        </select>
    }

    @if (ViewBag.SuccessMessage != null && ViewBag.SuccessMessage != "")
    {
        <div class="alert alert-block alert-success">
            <button class="close" data-dismiss="alert" type="button">
                <i class="ace-icon fa fa-times"></i>
            </button>
            <i class="ace-icon fa fa-check green"></i>
            @ViewBag.SuccessMessage
        </div>
    }

    @if (ViewBag.FailedMessage != null && ViewBag.FailedMessage != "")
    {
        <div class="alert alert-block alert-danger">
            <button class="close" data-dismiss="alert" type="button">
                <i class="ace-icon fa fa-times"></i>
            </button>
            <i class="ace-icon fa fa-warning red"></i>
            @ViewBag.FailedMessage
        </div>
    }
    @Html.Grid(Model).Columns(columns =>
{
    columns.Add(u => u.OrderStatus).Titled("STT").SetWidth(20).Sanitized(false).Encoded(false).RenderValueAs(n => n.OrderStatus.ToString());
    columns.Add(u => u.Name).Titled("Tên trạng thái").SetWidth(180);
    columns.Add(u => u.SuccessRate).Titled("Tỷ lệ thành công (%)").SetWidth(30).RenderValueAs(u => u.SuccessRate.ToString());
    columns.Add(u => u.ColorStatus).Titled("Màu sắc").SetWidth(30).Sanitized(false).Encoded(false).RenderValueAs(n => GridColumnColor(n.ColorStatus));
    columns.Add(u => u.EndStatus).Titled("Trạng thái cuối").SetWidth(30).Sanitized(false).Encoded(false).RenderValueAs(n => GridColumnEndStatus(n.EndStatus.ToString()));
    columns.Add(u => u.Type).Titled("Loại trạng thái").SetWidth(30).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnType(u.Type.ToString()));
    columns.Add(u => u.TypeForecast).Titled("Dự báo").SetWidth(30).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnForecast(u.TypeForecast.ToString()));
    columns.Add(u => u.Id).Titled(Wording.Action).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnCommand(u.Id,u.OrderStatus.Value,u.Type.Value)).SetWidth(30);
})
    @using (Html.BeginButtonContainer(pageSetting))
    {
        if (Erp.BackOffice.Filters.SecurityFilter.AccessRight("Create", "StatusLead", "Crm"))
        {

            var lastOrderStatus = Model.Where(x => x.Type == ViewBag.DataType).ToList().Max(status => status.OrderStatus);
            var typeoption = ViewBag.DataType != null ? ViewBag.DataType : 0;
            @Html.Button(Wording.CreateNew, ButtonType.aTag, ButtonColor.Primary, ButtonSize.Mini, true, IconType.Plus, IconSize.Default, false, new { onclick = "OpenPopup('" + Url.Action("Create", "StatusLead", new { IsPopup = true, lastOrderStatus = lastOrderStatus, typeoption = typeoption }) + "', '', 500, 500)" })
        }
    }
    @section scripts {
                           <script>
    $(document).on('click', '.btnEdit', function () {
        var id = $(this).val();
        OpenPopup('@Url.Action("EditStatus", "StatusLead", new { IsPopup = true,id = "__id__" })'.replace('__id__', id), '', 500, 500)
    })
    $(document).on('click', '.btnCreate', function () {
        var value = $(this).val().split(',');
        var OrderStatus = value[0];
        var type = value[1];
        OpenPopup('@Url.Action("Create", "StatusLead", new { IsPopup = true, lastOrderStatus = "__OrderStatus__", typeoption = "__typeoption__" })'.replace('__OrderStatus__', OrderStatus).replace('__typeoption__', type), '', 500, 500)
    })
    $(document).on('click', '.btnDelete', function () {
        var id = $(this).val();
        Swal.fire({
            title: 'Bạn có chắc muốn xóa item?',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Xóa',
            cancelButtonText: 'Hủy'
        }).then((result) => {
            if (result.isConfirmed) {
                $.ajax({
                url: '/StatusLead/Delete',
                type: 'POST',
                data: { id: id },
                success: function (rs) {
                    if (rs.Success) {
                        location.reload();
                        toastr.success('Xóa trạng thái thành công!','Thông báo', { timeOut: 2000 });
                    }
                    else {
                        toastr.error("Xóa trạng thái thất bại!", 'Thông báo');
                    }
                },
                error: function (xhr, status, error) {
                    toastr.error("Xóa trạng thái thất bại!", 'Thông báo');
                }
            })
            }
        });

    })
    // Tải lại trang Index khi create và edit hoàn thành
    window.addEventListener('message', function (event) {
        if (event.data === 'reloadIndex') {
            location.reload();
        }
    });
    function onTypeChange() {
        var type = document.getElementById("iType").value; // Lấy giá trị của tùy chọn được chọn
        if (type != 0) {
            var newUrl = "/StatusLead/Index?type=" + type;
            window.location.href = newUrl;
        } else{
            var newUrl = "/StatusLead/Index";
            window.location.href = newUrl;
        }
    }
                           </script>

    }
