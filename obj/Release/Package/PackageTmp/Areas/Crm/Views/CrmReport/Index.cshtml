@model IEnumerable<Crm_LevelViewModel>

    @using Erp.BackOffice.App_GlobalResources
    @using Erp.BackOffice.Crm.Models
    @using Erp.BackOffice.Helpers
    @using GridMvc.Html

    @{
        ViewBag.Title = "Level";
        bool isPopup = Request["IsPopup"] != null && Request["IsPopup"].ToString().ToLower() == "true" ? true : false;
        if (isPopup)
        {
            Layout = "~/Views/Shared/_PopupLayout.cshtml";
        }
        else
        {
            Layout = "~/Views/Shared/ACE_AdminLayout.cshtml";
        }

        Erp.BackOffice.Models.PageSetting pageSetting = new Erp.BackOffice.Models.PageSetting
        {
            ModuleName = "CrmReport",
            ActionName = "Index",
            PageTitle = ViewBag.Title,
            DisplaySearchPanel = false,
            IsPopup = false,
            DisplayBackButton = false
        };
        var index = 1;
    }

    <link href="@Url.Content("~/assets/css/Gridmvc.css")" rel="stylesheet" type="text/css" />
    <script src="@Url.Content("~/Scripts/gridmvc.min.js")" type="text/javascript"></script>

    @helper GridColumnCommand(int id)
    {
        <div class="hidden-phone visible-desktop action-buttons" style="display: inline-block; float: left;">
            <p>
                @if (Erp.BackOffice.Filters.SecurityFilter.AccessRight("Index", "CrmReport", "Crm"))
                {
                    <button name="Delete" value="@id" type="submit" class="btn btn-mini btn-danger">
                        <i class="ace-icon fa fa-trash bigger-120"></i>
                    </button>
                }
            </p>
        </div>
    }

    @helper GridColumnName(string name, int id, bool isPopup)
    {
        if (isPopup)
        {
            <a onclick="parent.selectBranchItem(@id)">@name</a>
        }
        else
        {
            name = string.IsNullOrEmpty(name) ? "No Title" : name;
            <a href="@Url.Action("EditCrm_Level", "CrmReport" , new { Id= id })">@name</a>
        }
    }

    @helper GridColumnCategoryValue(object value)
    {
        var attr = Common.GetCategoryByValueOrId("value", value);
        <span>@(attr != null ? attr.Name : "")</span>
    }

    @helper CheckDeleteColumns(int Id)
    {
        <label>
            <input class="ace class-delete-all" type="checkbox" name="DeleteId-checkbox" value="@Id">
            <span class="lbl"></span>
        </label>
    }

    @helper BuildCheckAll()
    {
        <label>
            <input class="ace" type="checkbox" name="checkAll" id="checkAll" />
            <span class="lbl"></span>
        </label>
    }

    @using (Html.BeginPageHeaderContainer(pageSetting))
    {

    }

    @if (ViewBag.SuccessMessage != null && ViewBag.SuccessMessage != "")
    {
        <div class="alert alert-block alert-success">
            <button class="close" data-dismiss="alert" type="button">
                <i class="ace-icon fa fa-times"></i>
            </button>
            <i class="ace-icon fa fa-check green"></i>
            @ViewBag.SuccessMessage
        </div>
    }

    @if (ViewBag.FailedMessage != null && ViewBag.FailedMessage != "")
    {
        <div class="alert alert-block alert-danger">
            <button class="close" data-dismiss="alert" type="button">
                <i class="ace-icon fa fa-times"></i>
            </button>
            <i class="ace-icon fa fa-warning red"></i>
            @ViewBag.FailedMessage
        </div>
    }
    @using (Html.BeginForm("DeleteCrm_Level", "CrmReport", FormMethod.Post))
    {
        @Html.Grid(Model).Columns(columns =>
       {
           columns.Add().Titled(BuildCheckAll().ToHtmlString()).SetWidth(20).Sanitized(false).Encoded(false).RenderValueAs(n => CheckDeleteColumns(n.Id));
           columns.Add().Titled("STT").SetWidth(50).RenderValueAs(o =>
                   {
                       return @<text> @(index++) </text>;
                         });
                 columns.Add().Titled("Tên").Sortable(false).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnName(u.Name, u.Id, isPopup)).SetWidth(30);
                 columns.Add(u => u.Level).Titled("Level").Sortable(false).SetWidth(100).RenderValueAs(u => u.Level);
                 columns.Add(u => u.StaredIndex).Titled("Tối thiểu(%)").Sortable(false).SetWidth(30).RenderValueAs(u => u.StaredIndex.ToString());
                 columns.Add(u => u.EndIndex).Titled("Tối đa(%)").SetWidth(30).RenderValueAs(u => u.EndIndex.ToString());
                 columns.Add(u => u.Id).Titled(Wording.Action).Sanitized(false).Encoded(false).RenderValueAs(u => GridColumnCommand(u.Id)).SetWidth(20);
             }).WithPaging(10)

        using (Html.BeginButtonContainer(pageSetting))
        {
            if (Erp.BackOffice.Filters.SecurityFilter.AccessRight("CreateCrm_Level", "CrmReport", "Crm"))
            {
                <a class="btn btn-primary btn-mini" href="@Url.Action("CreateCrm_Level", "CrmReport")">
                    <i class="ace-icon fa fa-plus"></i>
                    @Wording.CreateNew
                </a>
            }
            if (Erp.BackOffice.Filters.SecurityFilter.AccessRight("DeleteCrm_Level", "CrmReport", "Crm"))
            {
                <button name="DeleteAll" value="DeleteAll" type="submit" class="btn btn-mini btn-danger" onclick="return CheckIsval();">
                    <i class="ace-icon fa fa-trash bigger-120"></i>
                    @Wording.Delete
                </button>
            }
        }
    }


    @section Scripts {
        <script type="text/javascript">
            function CheckIsval() {
                if ($('[name="DeleteId-checkbox"]').is(':checked') == false) {
                    alert("Phải chọn ít nhất 1 item.");
                    return false;
                }
                else {
                    if (confirm('Bạn có chắc muốn xóa các item đã chọn ?')) {
                        return true;
                    }
                    else {
                        return false;
                    }
                }
            }

            $('[name="Delete"]').click(function () {
                if (confirm('Bạn có chắc muốn xóa item ?')) {
                    $(this).closest('tr').children('td').each(function (i, e) {
                        // $(this).find("input.class-delete-all").prop("checked", true);
                        return true;
                    })
                }
                else {
                    return false;
                }

            })

            $('.grid-header').mouseover(function () {
                $('.grid-header')[0].title = "Chọn tất cả";
            });

            $('.class-delete-all').on('click', function () {
                if ($('.class-delete-all:checked').length == $('.class-delete-all').length) {
                    $('#checkAll').prop('checked', true);
                } else {
                    $('#checkAll').prop('checked', false);
                }
            });
        </script>
    }
